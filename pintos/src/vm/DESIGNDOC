       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

James Whitbeck <jamesbw@stanford.edu>
Benjamin Shapero <bshapero@stanford.edu>
Stewart MacGregor-Dennis <sadennis@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Sharing is implemented in sharing.h/c .

An extra hash table called executable_table was added. The key is the 
(inode, offset) pair. All read only pages from executables are also 
managed through this hash table. Those from the same (inode, offset) pair
 are added to a list.

struct hash executable_table;
struct lock executable_table_lock;

struct shared_executable
{
	struct inode *inode;
	off_t offset;
	struct lock busy;
	struct list user_pages;
	struct hash_elem elem;
};

When such a page faults, it first looks in this list for a page that is 
in physical memory, before evicting and paging in from disk.

Therefore, the code has been supplemented with checks like :
if (page->type == EXECUTABLE && page->writable == false)
to deal with the special case of read-only executables.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


In page.h:

Struct page gets added to a process's supplemental page table and also 
to the global frame table if the page is in memory.

struct page{
  void *vaddr;
  void *paddr; //kernel vaddr. NULL is page is not in memory
  bool pinned;
  uint32_t *pd;
  enum page_type type;
  bool writable;
  uint32_t swap_slot;
  mapid_t mapid;
  struct file *file;
  off_t offset;
  uint32_t valid_bytes; // mmapped pages might be incomplete and must be filled with zeros.
  struct hash_elem page_elem; //for process's supp page table
  struct hash_elem frame_elem; // for global frame table
  struct list_elem exec_elem; // for executable table if needed
  struct lock busy; // busy when page is being paged in/out or freed
};


Possible page types. Dirty EXECUTABLE and ZERO pages get changed to SWAP 
when they are written to swap.

enum page_type
{
  SWAP,
  MMAPPED,
  EXECUTABLE,
  ZERO,
};

In process.h:

Added a struct hash supp_page_table to each process.

struct process
{
    tid_t parent_tid;
    tid_t tid;
    bool finished; // toggled when the process has terminated
    bool parent_finished; //toggled when the parent thread has terminated
    struct semaphore sema_finished; //upped when terminated, downed when waiting
    int exit_code;
    struct file *executable; //pointer to file to keep open
    struct hash supp_page_table;
    struct list_elem elem;
};






---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Both virtual and physical location (which corresponds to a kernel virtual
address) are stored in the same struct page, which also contains a pointer
to the owner user process's page directory. Given a virtual address
vaddr, we look it up in the process's supp_page_table. If the physical
address (paddr) is not NULL, this is the address of the frame that
contains the data. 
In the case of shared read-only executable pages, if paddr is NULL, then 
we look through all the pages that share the same executable to see if 
one has a physical memory frame allocated.



>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Aliasing is mainly an issue in the clock algorithm where we don't want 
to evict a page if it is dirty. A page has different dirty bits and
accessed bits for the user page directory and the kernal page directory.
We always checked the dirty and accessed bit for both the virtual address
and the kernel address. 

On paging in, we also clear out the dirty bits for both.

For sharing, we also query and clear the accessed bits for all the 
pages that share the same executable.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The entire frame table has a single lock that is acquired before any
modifications to the table.  Within the eviction function, the clock
algorithm is inside a critical section, so each process is given a
different frame to evict. The eviction itself can go on  
concurrently, but the clock algorithm is synchronous.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We started with a design that used two different data structure: struct
page and struct frame. 
It meant that first we had to find a struct frame to evict, then find its
owning struct page. That involved keeping around a pointer to the owning 
process to get access to the supplemental page table for that process. Then 
data had to be updated in both places. We also had issues where once we picked 
the frame to evict, the owning page was being freed.

Putting everything is a single struct page made things a lot easier. Each 
struct page is in its process's supp_page_table, but can also be inserted 
into the global frame table, thanks to the second hash_elem (frame_elem) in
struct page.  This also made moving these elements between the different
data structures was quick and didn't require new declarations.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In frame.h:

Frame table and lock:

struct hash frame_table;
struct lock frame_table_lock;

Globals for the clock algorithm:
void *hand;
void *base;
uint32_t user_pool_size;

In swap.h:

Bitmap for free swap slots and lock:
struct bitmap *swap_bitmap;
struct lock swap_lock;


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We implemented a simple clock algorithm that approximates a Last Recently
Used (LRU) algorithm, using accessed and dirty bits as indicators of time.
The global values are initialized in frame_base_init(), which sets the
range of physical address space available to user pages.  Although the
frame_table is stored as a hash table, every frame has a physical address
of base + n*PGSIZE.  The clock starts at the base of the user pool's
address space and every 'tick' advances the hand by PGSIZE. We advance the
hand, and check that frame. If the page in this frame has been accessed
via its user page directory or the kernel page directory, we clear the
accessed bits of both and move on to the next address. If it hasn't been
accessed, and the frame is not "pinned" (meaning that this page is not
yet fully written into memory) then this frame will be evicted.

In the case of sharing 
read-only executables, we also check the accessed bits of the sharing pages.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

The paddr field in the Q struct page is NULLed. The present bit for Q 
is cleared. The struct page for Q is removed from the frame table and 
the one for P is inserted.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

The virtual address was considered a stack access if:
- the address was between PHYS_BASE and the stack pointer esp
- OR the address was esp - 4 (PUSH)
- OR the address was esp -32 (PUSHA)
All other accesses are treated as invalid.



---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

The main locks used in our design are:
- a global lock on the frame_table
- a lock for each struct page

The frame_table lock is acquired whenever the frame table is accessed
(insert, delete, lookup) or when the clock algorithm is run. 
The individual page lock is acquired when evicting and paging in the page
 (and when freeing the page). These two types are rarely held at the same 
time, and when they are (briefly in frame_evict), it is the frame_lock 
that is acquired first, thereby preventing circularity (and thus deadlocks).

In page_in, we do acquire the page lock first, then we may acquire the 
frame_lock in frame_allocate. However, we will never need to acquire 
the lock for the same page in page_in and in frame_evict. Indeed, a page 
cannot be picked for eviction while it is being paged in (see next question).

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

When a page is about to be evicted, the paddr field is immediately set 
to NULL and the present bit is cleared. This happens before we try to 
write out the data to disk. Therefore any access to that virtual address 
will fault.

Moreover, during eviction, we acquire the page's lock (before clearing the 
set bit). This lock is also acquired before paging the page back in. 
Therefore we are guaranteed the page will be written to disk before it 
is read back in.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

All frames that are allocated are pinned by default (see question below).
That means that they cannot be picked by the clock algorithm for eviction.
Only once the page is read in is it un-pinned.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

All the syscalls that involve acquiring the filesystem lock cannot afford 
to page fault. That would involve reacquiring the filesystem lock to 
page in the data from swap. Therefore we decide to "pin" all the pages
that were needed for the system call before acquiring the lock.

In practice, that meant setting the pinned field in the struct page.
This field meant that the clock algorithm would not choose this frame 
for eviction (it still clears the accessed bit though).

The pinning function check whether the page is in physical memory. If 
not, it is paged in.

Stack extension is dealt with in the verify_uaddr function. Now, in 
addition to verifying the validity of the address, if the address looks like 
a stack access, it extends the stack.

Other memory accesses are allowed, and required, to page fault.



---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We think our design allows for quite a bit of parallelism. In particular,
the I/O related to pageing data in and out of disk only requires acquiring 
the page's lock. The global lock on the frame_table is only used for
modifications of the frame table or for the clock algorithm.  Thus, if
multiple processes page fault simulaneously, our system will be more
conservative regarding parallelism.  Hopefully, however, simultaneous page
faults are relatively uncommon in a well-designed system.

At first, we were locking all of frame_evict with the global frame_table_lock. 
The would mean that only one thread could be evicting at a time. This was 
clearly a limit on parallelism, even though it made things easier. Our current 
design manages to work with finer grained locking.

Where our locking scheme is coarser is for sharing. We use only one lock for the 
whole executable_table. The reasons for that were:
- it was easier
- the number of shared executable pages is a small proportion of the pages 
that get paged in.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


In process.h:

typedef int mapid_t;
#define MAP_FAILED ((mapid_t) -1)

Struct mmapped_file wraps a file pointer with inform

struct mmapped_file
{
    struct file *file;
    void *base_page; //virtual page at which the file starts
    mapid_t mapid;
    struct list_elem elem;
};

In thread.h:

struct list mmapped_files was added to struct thread.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

The memory mapped files are recorded in a list in the struct thread.

Each page is recorded in a struct page, like any other VM page.

The page fault involves bringing in the page from disk. It is 
therefore exactly the same as bringing in an executable page.

For evicting, it is slightly different. Indeed, the dirty pages get 
writing back to their original files, not to swap.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

For every address (by PGSIZE increments) between the base address at which 
we want to map the file and the top of the file, we look up the address 
in the supplemental page table. 
If we find a page already, then there is an overlap.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Our implementation shares code where it can be. For example, the mmapped 
pages and the executable pages are both represented with the same 
struct page.
The paging in from disk of executables and mmapped files used the 
same code.
The eviction is different because we are writing to file and not to swap, 
so code is not shared.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?